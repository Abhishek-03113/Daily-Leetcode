from collections import deque

def test_sequence(p, moves):
    """Test what sequence is generated by the given moves"""
    dq = deque(p)
    result = []
    
    for move in moves:
        if move == 'L':
            result.append(dq.popleft())
        else:
            result.append(dq.pop())
    
    return result

def is_bad_sequence(seq):
    """Check if sequence contains 5 consecutive increasing or decreasing elements"""
    if len(seq) < 5:
        return False
    for i in range(len(seq) - 4):
        if all(seq[j] < seq[j+1] for j in range(i, i+4)):
            print(f"Bad increasing subsequence at positions {i}-{i+4}: {seq[i:i+5]}")
            return True
    for i in range(len(seq) - 4):
        if all(seq[j] > seq[j+1] for j in range(i, i+4)):
            print(f"Bad decreasing subsequence at positions {i}-{i+4}: {seq[i:i+5]}")
            return True
    return False

# Test all examples
test_cases = [
    [1, 2, 3, 4, 5, 6, 7],
    [1, 3, 6, 8, 9, 7, 5, 4, 2],
    [1, 2, 11, 3, 6, 4, 7, 8, 12, 5, 10, 9],
    [4, 1, 2, 5, 6, 3],
    [1, 2, 3, 5, 4],
    [5, 1, 8, 6, 2, 7, 9, 4, 3]
]

moves_results = [
    "LRLRLRL",
    "LLRLRLRLL", 
    "LRLLLRRRLRLL",
    "RRLRLL",
    "LRLRL",
    "RLLLRRLRL"
]

for i, (p, moves) in enumerate(zip(test_cases, moves_results)):
    print(f"Test case {i+1}: {p}")
    print(f"Moves: {moves}")
    result = test_sequence(p, moves)
    print(f"Result: {result}")
    print(f"Is bad: {is_bad_sequence(result)}")
    print()
