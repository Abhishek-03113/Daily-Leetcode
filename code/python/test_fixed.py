from collections import deque

def test_sequence(p, moves):
    """Test what sequence is generated by the given moves"""
    dq = deque(p)
    result = []
    
    for move in moves:
        if move == 'L':
            result.append(dq.popleft())
        else:
            result.append(dq.pop())
    
    return result

def is_bad_sequence(seq):
    """Check if sequence contains 5 consecutive increasing or decreasing elements"""
    if len(seq) < 5:
        return False
    for i in range(len(seq) - 4):
        if all(seq[j] < seq[j+1] for j in range(i, i+4)):
            print(f"Bad increasing subsequence at positions {i}-{i+4}: {seq[i:i+5]}")
            return True
    for i in range(len(seq) - 4):
        if all(seq[j] > seq[j+1] for j in range(i, i+4)):
            print(f"Bad decreasing subsequence at positions {i}-{i+4}: {seq[i:i+5]}")
            return True
    return False

def fixed_solve(p):
    """Fixed algorithm"""
    dq = deque(p)
    q = []

    i = 0
    while dq:
        if len(dq) == 1:
            dq.popleft()
            q.append('L')
            break
            
        left = dq[0]
        right = dq[-1]

        if i % 2 == 0:
            # Even index: take minimum
            if left < right:
                dq.popleft()
                q.append('L')
            else:
                dq.pop()
                q.append('R')
        else:
            # Odd index: take maximum
            if left > right:
                dq.popleft()
                q.append('L')
            else:
                dq.pop()
                q.append('R')
        
        i += 1

    return ''.join(q)

# Test the problematic case again
test_case = list(range(10, 0, -1))  # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print(f"Test case: {test_case}")

moves = fixed_solve(test_case)
print(f"Moves: {moves}")

result = test_sequence(test_case, moves)
print(f"Result sequence: {result}")
print(f"Is bad: {is_bad_sequence(result)}")
print()

# Test another edge case
test_case2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(f"Test case 2: {test_case2}")

moves2 = fixed_solve(test_case2)
print(f"Moves: {moves2}")

result2 = test_sequence(test_case2, moves2)
print(f"Result sequence: {result2}")
print(f"Is bad: {is_bad_sequence(result2)}")
print()

# Test a specific edge case where elements are in perfect alternating order
test_case3 = [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]
print(f"Test case 3: {test_case3}")

moves3 = fixed_solve(test_case3)
print(f"Moves: {moves3}")

result3 = test_sequence(test_case3, moves3)
print(f"Result sequence: {result3}")
print(f"Is bad: {is_bad_sequence(result3)}")
